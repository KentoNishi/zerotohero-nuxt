import decode from 'unescape'
import { parse } from 'node-html-parser'
import { unique } from './array'
import { escapeRegExp } from './regex'

import { transliterate as tr} from "transliteration";
import { addPitchAccent } from "./japanese";

export const STYLIZED_NUMBERS = [
  '‚ì™‚ë†‚ë°‚ë¢‚ë£‚ë§‚ë•‚ë¶‚ëß‚ë®‚ë©‚ë™‚ë´‚ë¨‚ë≠‚ëÆ‚ëØ‚ë∞‚ë±‚ë≤‚ë≥„âë„âí„âì„âî„âï„âñ„âó„âò„âô„âö„âõ„âú„âù„âû„âü„ä±„ä≤„ä≥„ä¥„äµ„ä∂„ä∑„ä∏„äπ„ä∫„äª„äº„äΩ„äæ„äø',
  'üÑã‚ûÄ‚ûÅ‚ûÇ‚ûÉ‚ûÑ‚ûÖ‚ûÜ‚ûá‚ûà‚ûâ',
  '‚ìø‚ù∂‚ù∑‚ù∏‚ùπ‚ù∫‚ùª‚ùº‚ùΩ‚ùæ‚ùø‚ì´‚ì¨‚ì≠‚ìÆ‚ìØ‚ì∞‚ì±‚ì≤‚ì≥‚ì¥',
  'üÑå‚ûä‚ûã‚ûå‚ûç‚ûé‚ûè‚ûê‚ûë‚ûí‚ûì',
  '‚ì™‚ìµ‚ì∂‚ì∑‚ì∏‚ìπ‚ì∫‚ìª‚ìº‚ìΩ‚ìæ',
  'üÑÄ‚íà‚íâ‚íä‚íã‚íå‚íç‚íé‚íè‚íê‚íë‚íí‚íì‚íî‚íï‚íñ‚íó‚íò‚íô‚íö‚íõ',
  '‚ì™‚ë¥‚ëµ‚ë∂‚ë∑‚ë∏‚ëπ‚ë∫‚ëª‚ëº‚ëΩ‚ëæ‚ëø‚íÄ‚íÅ‚íÇ‚íÉ‚íÑ‚íÖ‚íÜ‚íá',
  '‚ì™„äÄ„äÅ„äÇ„äÉ„äÑ„äÖ„äÜ„äá„äà„äâ',
  'ÔºêÔºëÔºíÔºìÔºîÔºïÔºñÔºóÔºòÔºô'
]

export const roundTo = (n, dec = 2) => {
  return Math.round(n * Math.pow(10, dec)) / Math.pow(10, dec)
}
export const normalizeStylizedNumber = (circleNumber) => {
  for (let stylizedNumbers of STYLIZED_NUMBERS) {
    let number = stylizedNumbers.indexOf(circleNumber)
    if (number !== -1) return number
  }
}
export const normalizeStylizedNumbersInText = (text) => {
  let normalized = text
  for (let stylizedNumbers of STYLIZED_NUMBERS) {
    let regex = new RegExp(`[${stylizedNumbers}]`, 'g')
    let matches = normalized.match(
      regex
    );
    if (matches) {
      for (let m of matches) {
        normalized = normalized.replace(m, `[${normalizeStylizedNumber(m)}]`)
      }
    }
  }
  return normalized;
}
export const unescape = (escapedHTML) => {
  return decode(escapedHTML)
}
export const splitByReg = (text, reg) => {
  let words = text.replace(reg, '!!!BREAKWORKD!!!$1!!!BREAKWORKD!!!').replace(/^!!!BREAKWORKD!!!/, '').replace(/!!!BREAKWORKD!!!$/, '')
  return words.split('!!!BREAKWORKD!!!')
}

export const highlight = (text, word, level = false) => {
  let levelAttr = level ? ` data-level="${level}"` : ''
  if (text && word && word.trim() !== '') {
    return text
      .replace(
        new RegExp('(' + escapeRegExp(word).replace(/\*/g, '[^Ôºå„ÄÇÔºÅÔºü,!.?]+?') + ')', 'gi'),
        `<span ${levelAttr} class="highlight">$1</span>`
      )
  } else {
    return text
  }
}

export const highlightMultiple = (text, words, level) => {
  if (!words) return text
  let sortedWords = unique(words)
  sortedWords = sortedWords.sort((a, b) => b.length - a.length)
  if (text && sortedWords && sortedWords.length > 0) {
    for (let word of sortedWords) {
      text = highlight(text, word, level)
    }
    return text
  } else {
    return text
  }
}

// https://stackoverflow.com/questions/48731396/javascript-unique-string-array-case-insensitive-but-keep-one-case-sensitive-resu
export const uniqueIgnoreCase = (names) => {
  let uNames = new Map(names.map(s => [s.toLowerCase(), s]));
  return [...uNames.values()]
}

export const stripTags = (html) => {
  let root = parse(html)
  let text = root.textContent || root.innerHTML || ''
  return decode(text)
}

export const ucFirst = (string) => {
  return string.charAt(0).toUpperCase() + string.slice(1)
}

export const makeTextFile = (text) => {
  if (typeof window !== 'undefined') {
    var data = new Blob([text], { type: "text/plain" });
    // If we are replacing a previously generated file we need to
    // manually revoke the object URL to avoid memory leaks.
    if (textFile !== null) {
      window.URL.revokeObjectURL(textFile);
    }

    var textFile = window.URL.createObjectURL(data);
    // returns a URL you can use as a href
    return textFile;
  }
}

export const formatK = (n, dec = 2, lang = "en") => {
  if (['ko'].includes(lang)) {
    if (n >= Math.pow(10, 12)) {
      return roundTo(n / Math.pow(10, 12), dec) + "Ï°∞"
    }
    if (n >= Math.pow(10, 8)) {
      return roundTo(n / Math.pow(10, 8), dec) + "Ïñµ"
    }
    if (n >= Math.pow(10, 4)) {
      return roundTo(n / Math.pow(10, 4), dec) + "Îßå"
    }
  } else if (['ja', 'zh'].includes(lang)) {
    if (n >= Math.pow(10, 12)) {
      return roundTo(n / Math.pow(10, 12), dec) + "ÂÖÜ"
    }
    if (n >= Math.pow(10, 8)) {
      return roundTo(n / Math.pow(10, 8), dec) + "‰∫ø"
    }
    if (n >= Math.pow(10, 4)) {
      return roundTo(n / Math.pow(10, 4), dec) + "‰∏á"
    }
  } else {
    if (n >= Math.pow(10, 12)) {
      return roundTo(n / Math.pow(10, 12), dec) + "T"
    }
    if (n >= Math.pow(10, 9)) {
      return roundTo(n / Math.pow(10, 9), dec) + "B"
    }
    if (n >= Math.pow(10, 6)) {
      return roundTo(n / Math.pow(10, 6), dec) + "M"
    }
    if (n >= Math.pow(10, 3)) {
      return roundTo(n / Math.pow(10, 3), dec) + "K"
    }
  }
  return n
}

export const removeInlineStylesFromString = (htmlString) => {
  if (typeof DOMParser === "undefined") {
    console.warn("DOMParser is not defined. Cannot remove inline styles.");
    return htmlString;
  }

  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlString, "text/html");
  const elementsWithStyle = doc.querySelectorAll("[style]");

  elementsWithStyle.forEach((element) => {
    element.removeAttribute("style");
  });

  const serializer = new XMLSerializer();
  const updatedHtmlString = serializer.serializeToString(doc.body);
  return updatedHtmlString;
}


export const parseQueryString = (queryString) => {
  const params = new URLSearchParams(queryString);
  const obj = {};
  for (let [key, value] of params.entries()) {
      obj[key] = value;
  }
  return obj;
}

/*
* https://gist.github.com/yakovsh/345a71d841871cc3d375
/* @shimondoodkin suggested even a much shorter way to do this */
export const stripHebrewVowels = (rawString) => {
  return rawString.replace(/[\u0591-\u05C7]/g, "");
}

export const breakSentences = (text) => {
  text = text.replace(/([!?:„ÄÇÔºÅÔºüÔºö;Ôºõ])/g, "$1SENTENCEENDING!!!");
  text = text.replace(/(\. )/g, "$1SENTENCEENDING!!!");
  let sentences = text.split("SENTENCEENDING!!!");
  return sentences.filter((sentence) => sentence.trim() !== "");
}

// Convert ISO 8601 duration string to total seconds
export const convertDurationToSeconds = (durationStr) => {
  const match = /^PT(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?$/.exec(durationStr);

  if (!match) {
    return 0; // or you might throw an error or handle it differently
  }

  const hours = match[1] ? parseInt(match[1], 10) : 0;
  const minutes = match[2] ? parseInt(match[2], 10) : 0;
  const seconds = match[3] ? parseInt(match[3], 10) : 0;

  return (hours * 3600) + (minutes * 60) + seconds;
}

// Format total seconds as a duration string
export const formatSecondsToDuration = (totalSeconds) => {
  const hours = Math.floor(totalSeconds / 3600);
  totalSeconds %= 3600;
  const minutes = Math.floor(totalSeconds / 60);
  const seconds = totalSeconds % 60;

  const formattedMinutes = minutes.toString().padStart(hours ? 2 : 1, "0");
  const formattedSeconds = seconds.toString().padStart(2, "0");

  return hours ? `${hours}:${formattedMinutes}:${formattedSeconds}` : `${formattedMinutes}:${formattedSeconds}`;
}

// Convert ISO 8601 duration string to a formatted duration string
export const parseDuration = (durationStr) => {
  return formatSecondsToDuration(convertDurationToSeconds(durationStr));
}

export const timeStringToSeconds = (timeString) => {
  const timeParts = timeString.split(':').reverse();
  let totalSeconds = 0;

  if (timeParts[0]) {
    totalSeconds += parseInt(timeParts[0], 10); // seconds
  }
  if (timeParts[1]) {
    totalSeconds += parseInt(timeParts[1], 10) * 60; // minutes
  }
  if (timeParts[2]) {
    totalSeconds += parseInt(timeParts[2], 10) * 3600; // hours
  }

  return totalSeconds;
}


// Called from <EntryForms> and <WordBlock> components for Russian words

export const accent = (text) => {
  return text.replace(/'/g, "ÃÅ");
}

// https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number
export const isNumeric = (str) => {
  if (typeof str != "string") return false; // we only process strings!
  return (
    !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...
    !isNaN(parseFloat(str))
  ); // ...and ensure strings of whitespace fail
}

export const isPunctuation = (str) => {
  const regex = /^[\p{P}\p{S}]+$/u;
  return regex.test(str);
}

export const isThai = (text) => {
  let match = text.match(/[\u0E00-\u0E7F]+/g);
  return match;
}

export const isChinese = (text) => {
  return text.match(
    // eslint-disable-next-line no-irregular-whitespace
    /[\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B‚Äå‚Äã\u3400-\u4DB5\u4E00-\u9FCC\uF900-\uFA6D\uFA70-\uFAD9]+/g
  )
}

export const hasKanji = (str) => {
  // Match Kanji characters (U+4E00 - U+9FFF)
  const kanjiRegex = /[\u4E00-\u9FFF]/;
  return kanjiRegex.test(str);
}

export const isHangul = (text) => {
  let isHangul = text.match(/[\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]+/g)
  return isHangul
}

export const containsCJKCharacters = (name) => {
  const cjkPattern = /[\u3040-\u30FF\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF]/;
  return cjkPattern.test(name);
}

export const formatName = (firstName, lastName, firstNameOnly = false) => {
  if (containsCJKCharacters(firstName) || containsCJKCharacters(lastName)) {
    return `${lastName}${firstName}`;
  } else {
    return firstNameOnly ? firstName : `${firstName} ${lastName}`;
  }
}

export const toCamelCase = (str) => {
  return str.replace(/_([a-z])/g, function (g) {
    return g[1].toUpperCase();
  });
}

export const sanitizeFilename = (filename) => {
  // remove invalid characters
  filename = filename.replace(/[\/:*?"<>|]/g, '-');

  // truncate if necessary (example: 200 characters)
  if (filename.length > 200) {
    filename = filename.slice(0, 197) + '...';
  }

  return filename;
}

export const convertPinyinSyllableToIPA = (pinyinWord) => {
  const pinyinToIPA = {
    a: "a",
    ai: "a…™ÃØ",
    an: "an",
    ang: "a≈ã",
    ao: "a äÃØ",
    e: "…§",
    ei: "e…™ÃØ",
    en: "…ôn",
    eng: "…ô≈ã",
    i: "i",
    ia: "ja",
    ian: "j…õn",
    iang: "j…õ≈ã",
    iao: "jauÃØ",
    ie: "je",
    in: "in",
    ing: "i≈ã",
    iong: "jo≈ã",
    iu: "jo äÃØ",
    o: "uo",
    ou: "o äÃØ",
    ong: "o≈ã",
    u: "u",
    ua: "wa",
    uai: "wa…™ÃØ",
    uan: "wan",
    uang: "wa≈ã",
    ue: "we",
    ui: "we…™ÃØ",
    un: "w…ôn",
    uo: "w…î",
    √º: "y",
    √ºe: "y…õ",
    √ºan: "y…õn",
    √ºn: "yn",
    // initial consonants
    b: "p",
    p: "p ∞",
    m: "m",
    f: "f",
    d: "t",
    t: "t ∞",
    n: "n",
    l: "l",
    g: "k",
    k: "k ∞",
    h: "x",
    j: "tÕ°…ï",
    q: "tÕ°…ï ∞",
    x: "…ï",
    zh: " àÕ° Ç",
    ch: " àÕ° Ç ∞",
    sh: " Ç",
    r: " ê",
    z: "ts",
    c: "ts ∞",
    s: "s",
    // tones
    1: "À•",
    2: "ÀßÀ•",
    3: "À®À©À¶",
    4: "À•À©",
    5: "",
  };
  // Tone processing
  const tones = {
    ƒÅ: ["a", "1"],
    √°: ["a", "2"],
    «é: ["a", "3"],
    √†: ["a", "4"],
    ƒì: ["e", "1"],
    √©: ["e", "2"],
    ƒõ: ["e", "3"],
    √®: ["e", "4"],
    ƒ´: ["i", "1"],
    √≠: ["i", "2"],
    «ê: ["i", "3"],
    √¨: ["i", "4"],
    ≈ç: ["o", "1"],
    √≥: ["o", "2"],
    «í: ["o", "3"],
    √≤: ["o", "4"],
    ≈´: ["u", "1"],
    √∫: ["u", "2"],
    «î: ["u", "3"],
    √π: ["u", "4"],
    «ñ: ["√º", "1"],
    «ò: ["√º", "2"],
    «ö: ["√º", "3"],
    «ú: ["√º", "4"],
  };

  for (let toneChar in tones) {
    if (pinyinWord.includes(toneChar)) {
      pinyinWord = pinyinWord.replace(toneChar, tones[toneChar][0]);
      pinyinWord += tones[toneChar][1];
    }
  }

  let ipaWord = "";

  // Convert consonants and vowels
  while (pinyinWord.length > 0) {
    let matchFound = false;

    for (let syllable of Object.keys(pinyinToIPA).sort(
      (a, b) => b.length - a.length
    )) {
      if (pinyinWord.startsWith(syllable)) {
        ipaWord += pinyinToIPA[syllable];
        pinyinWord = pinyinWord.slice(syllable.length);
        matchFound = true;
        break;
      }
    }

    if (!matchFound) {
      ipaWord += pinyinWord[0];
      pinyinWord = pinyinWord.slice(1);
    }
  }

  return ipaWord;
}

export const convertPinyinToIPA = (pinyin) => {
  if (!pinyin) {
    return "";
  }
  const syllables = pinyin.split(" ");
  const ipaArray = syllables.map(convertPinyinSyllableToIPA);
  return ipaArray.join(" ");
}

/**
 * Áô∫Èü≥Ë°®Ë®ò„ÇíÊï¥ÂΩ¢„Åô„Çã„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
 * @param {Object} params - „Éë„É©„É°„Éº„Çø„Çí„Åæ„Å®„ÇÅ„Åü„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
 * @param {Object} params.word - ÂçòË™û„Å´Èñ¢„Åô„Çã„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÄÇ„Éó„É≠„Éë„ÉÜ„Ç£„Å®„Åó„Å¶ pronunciation, head, kana, jyutping, pinyin, accentPatterns „Å™„Å©„ÇíÂê´„ÇÄ
 * @param {string} params.langCode - ÂØæË±°Ë®ÄË™û„ÅÆ„Ç≥„Éº„ÉâÔºà‰æãÔºö"ja", "vi", "tlh", "zh" „Å™„Å©Ôºâ
 * @param {Function} params.hasFeature - Ê©üËÉΩÂà§ÂÆöÁî®„ÅÆÈñ¢Êï∞„ÄÇ„Åü„Å®„Åà„Å∞„ÄÅhasFeature("transliteration") „ÅÆ„Çà„ÅÜ„Å´Âëº„Å≥Âá∫„Åô
 * @returns {string} Êï¥ÂΩ¢Ê∏à„Åø„ÅÆÁô∫Èü≥Ë°®Ë®ò
 */
export const formatPronunciation = ({ word, langCode, hasFeature }) => {
  let pronunciation = word.pronunciation;

  if (langCode === "vi") {
    // „Éô„Éà„Éä„É†Ë™û„ÅÆÂ†¥Âêà„ÄÅ[[‚Ä¶#Vietnamese|‚Ä¶]] „ÅÆÂΩ¢Âºè„ÇíÂçòÁ¥îÂåñ„Åô„Çã
    pronunciation = pronunciation.replace(/\[\[(.+?)#Vietnamese\|.+?]]/g, "$1");
  } else if (langCode === "tlh") {
    // „Ç≠„É™„É≥Ë™û„ÅÆÂ†¥Âêà„ÄÅ„Éò„ÉÉ„ÉâË°®Ë®ò„Åã„ÇâIPAË°®Ë®ò„Å´Â§âÊèõ„Åô„Çã
    pronunciation = Klingon.latinToIPA(word.head);
  } else if (word.kana) {
    // „Åã„Å™Ë°®Ë®ò„ÅåÂ≠òÂú®„Åô„Çã„Å™„Çâ„Åù„Å°„Çâ„Çí‰ΩøÁî®
    pronunciation = word.kana;
  } else if (word.jyutping && word.pinyin) {
    // Á≤§Ë™û„Å®‰∏≠ÂõΩË™ûÔºàÊãºÈü≥Ôºâ„ÅÆ‰∏°Êñπ„ÅåÂ≠òÂú®„Åô„Çã„Å™„Çâ„ÄÅ„Ç´„É≥„Éû„ÅßÁµêÂêà„Åô„Çã
    pronunciation = [word.jyutping, word.pinyin].join(", ");
  } else if (
    !pronunciation &&
    hasFeature("transliteration") &&
    !["tlh", "fa", "ja"].includes(langCode)
  ) {
    // Áô∫Èü≥„ÅåÁÑ°„Åè„ÄÅ„Åã„Å§ transliteration Ê©üËÉΩ„ÅåÊúâÂäπ„Åß„ÄÅÂØæË±°Ë®ÄË™û„ÅåÈô§Â§ñÂØæË±°„Åß„Å™„Åë„Çå„Å∞ transliteration „ÇíÈÅ©Áî®„Åô„Çã
    pronunciation = tr(word.head);
  }

  // Êó•Êú¨Ë™û„Åß„Ç¢„ÇØ„Çª„É≥„Éà„Éë„Çø„Éº„É≥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅ„Éî„ÉÉ„ÉÅ„Ç¢„ÇØ„Çª„É≥„Éà„Çí‰ªò‰∏é„Åô„Çã
  if (langCode === "ja" && word.accentPatterns && word.accentPatterns.length) {
    const accentedPronunciations = addPitchAccent(pronunciation, word.accentPatterns);
    // ‰∏äÊòáË®òÂè∑„ÅØÂâäÈô§„ÄÅ‰∏ãÈôçË®òÂè∑„ÅØ„ÄåÍúú„Äç„Å´ÁΩÆÊèõ„Åô„ÇãÔºà„ÇÇ„Åó„Åè„ÅØ‰ªñ„ÅÆË®òÂè∑„Åß„ÇÇÂèØÔºâ
    const pronunciations = accentedPronunciations.map(p =>
      p.replace(/‚Üë/g, "").replace(/‚Üì/g, "Íúú")
    );
    // ÈáçË§á„ÇíÊéíÈô§„Åó„Å¶ÁµêÂêà„Åô„Çã
    pronunciation = [...new Set(pronunciations)].join(", ");
  }

  // Áô∫Èü≥„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØËßíÊã¨Âºß„ÅßÂõ≤„ÇÄ
  let formattedPronunciation = pronunciation ? `[${pronunciation}]` : "";

  // „Ç≠„É™„É≥Ë™û„ÅÆÂ†¥Âêà„ÅØ„ÄÅ„Éò„ÉÉ„ÉâË°®Ë®ò„ÇíÂÖàÈ†≠„Å´‰ªòÂä†„Åô„Çã
  if (langCode === "tlh") {
    formattedPronunciation = word.head + " " + formattedPronunciation;
  }

  // ‰∏≠ÂõΩË™û„ÅÆÂ†¥Âêà„ÅØ„ÄÅÂÖÉ„ÅÆÁô∫Èü≥„Å´Âä†„Åà„ÄÅÂ§âÊèõ„Åó„ÅüIPAË°®Ë®ò„ÇÇË°®Á§∫„Åô„Çã
  if (langCode === "zh") {
    formattedPronunciation =
      word.pronunciation + " [" + convertPinyinToIPA(word.pronunciation) + "]";
  }

  // Êó•Êú¨Ë™û„Åß„Ç¢„ÇØ„Çª„É≥„Éà„Éë„Çø„Éº„É≥„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÄÅË£ÖÈ£æÊï∞Â≠ó„ÇíÊú´Â∞æ„Å´ËøΩÂä†„Åô„Çã
  if (langCode === "ja" && word.accentPatterns && word.accentPatterns.length) {
    formattedPronunciation += word.accentPatterns.map(p => STYLIZED_NUMBERS[0][p]).join(", ");
  }

  return formattedPronunciation;
}